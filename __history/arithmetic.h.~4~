#ifndef _ARITHMETIC_H
#define _ARITHMETIC_H
#include <string>
#include <vector>
#include <sstream>
using namespace std;

int osn = 10;

int num1 = 1000;
char m[16] ={'0', '1', '2', '3', '4', '5','6',
'7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
class LongArithmetic {

vector<int> a;
vector<char> to_16;


public:

LongArithmetic(int n) {

		for(int i = 0; i<n; i++){
			a.push_back(0);
			to_16.push_back(0);

		}



	}

	LongArithmetic() {}
	~LongArithmetic() { ; }

	vector<int> GetA() {
		return a;
	}

	vector<char> GetTo_16() {
		return to_16;
	}

      void StrToVector(string str) {
		  a.clear();

		for (int i = str.size()-1; i >= 0; i--) {
			to_16.push_back(str[i]);
			for (int j = 0; j < 16; j++) {

				if (str[i] == m[j]) a.push_back(j);
			}
		}

	}
	  string VectorToStr() {
		  string str = "";
		  for (int i = a.size() - 1; i >= 0; i--) {

			  str = str + m[a[i]];
		  }
		  return str;


	  }


	  int VectorToInt() {
		  int d=0;
		  for (int i = 0; i < a.size(); i++) {
			  d = d + a.at(i)*pow(10, i);

		  }

		  return d;

	  }
	  // int -> char
	  void To16(){

		  for (int i = 0; i < a.size(); i++) {

			  to_16.at(i) = m[a.at(i)];

		  }

	  }


	string OutputA()
	{
		string str="";
		for (int i = a.size() - 1; i >= 0; i--) {

			str = str + m[a[i]];
		}
		cout << str << endl;
		return str;
	}

	string OutputTo_16()
	{
		string str = "";
		for (int i = to_16.size() - 1; i >= 0; i--) {

			str = str + to_16[i];
		}
		cout << str << endl;
		return str;
	}



	bool  operator==(LongArithmetic b) {
		
		if (a.size() != b.a.size()) { 
			return false; }
		for (int i = 0; i < a.size(); i++) {
			if (a.at(i) != b.a.at(i)) {
				return false;
			}
		}
		return true;
	}

	bool operator>(LongArithmetic b) {
		if (a.size() != b.a.size())
			return a.size() > b.a.size();
		for (int i = a.size() - 1; i >= 0; i--) {
			if (a.at(i) != b.a.at(i)) {
				return a.at(i) > b.a.at(i);
			}
		}
		return false;
	}

	bool operator<(LongArithmetic b) {
		if (a.size() != b.a.size())
			return a.size() < b.a.size();
		for (int i = a.size() - 1; i >= 0; i--) {
			if (a.at(i) != b.a.at(i)) {
				return a.at(i) < b.a.at(i);
			}
		}
		return false;
	}

	LongArithmetic operator+(LongArithmetic b) {
	
		LongArithmetic temp;
		int max_size; 
		if (a.size() < b.a.size()) {
			max_size = b.a.size();
			while (a.size() < max_size) {
				a.push_back(0);
			}
		}
		else {
			max_size = a.size();
			while (b.a.size() < max_size) {
				b.a.push_back(0);
			}
		}
		
		int r = 0;

		for (int i = 0; i < max_size; i++) {
			
			temp.a.push_back( a.at(i) + b.a.at(i) + r);
			
			if (temp.a.back() >= osn) {
				int n = temp.a.back();
			    temp.a.pop_back();
				temp.a.push_back(n -osn);
				r = 1;
			}
			else {
				r = 0;
			}
		}
		
		
		return  temp;
	}
	LongArithmetic operator-(LongArithmetic b){
		LongArithmetic temp(num1);

		int max_size;
		if (a.size() < b.a.size()) {
			max_size = b.a.size();
			while (a.size() < max_size) {
				a.push_back(0);
			}
		}
		else {
			max_size = a.size();
			while (b.a.size() < max_size) {
				b.a.push_back(0);
			}
		}

		temp.a = a;
		int r = 0;

		for (int i = 0; i < a.size()-1; i++) {
		
			temp.a.at(i) -= b.a.at(i) + r;
			if (temp.a.at(i) < 0) {
				temp.a.at(i) += osn;
				temp.a.at(i + 1)--;
			}	
		}

	
		return temp;
	}	
	LongArithmetic operator*(LongArithmetic b) {
		LongArithmetic temp(a.size() + b.a.size());
		while (temp.a.size() <a.size() * b.a.size()) {
			temp.a.push_back(0);
		
		}
		temp.a.push_back(0);
		b.a.push_back(0);
		
	

		for (int i = 0; i < a.size(); i++) {
			int r = 0;
			
			for (int j = 0; j < b.a.size() | r; j++) {

				
				temp.a.at(i + j) += a.at(i) * b.a.at(j) + r;
				
				r = temp.a.at(i + j) / osn;
				
				int n = temp.a.at(i + j);
				
				temp.a.at(i + j) = n - (r*osn);
				
			}
		}

		int index;
		for (int i = 0; i < temp.a.size(); i++) {
			if (temp.a.at(i) != 0) { index = i; }

		}
		
		temp.a.erase(temp.a.begin() + index +1, temp.a.begin() + temp.a.size());
		return temp;
	}	

LongArithmetic operator/(long long x) {
		LongArithmetic temp(a.size());
		int ost = 0;
		for (int i = temp.a.size() - 1; i >= 0; i--) {
			int cur = ost * osn + a.at(i);
			temp.a.at(i) = cur / x;
			ost = cur % x;
		}
		if (!temp.a.at(temp.a.size() - 1) && temp.a.size() != 1) {
			temp.a.pop_back();
		}
		return temp;
	}

	LongArithmetic operator%(long long x) {
		LongArithmetic temp(a.size());
		int ost = 0;
		for (int i = temp.a.size() - 1; i >= 0; i--) {
			int cur = ost * osn + a.at(i);
			temp.a.at(i) = cur / x;
			ost = cur % x;
		}
		if (!temp.a.at(temp.a.size() - 1) && temp.a.size() != 1) {
			temp.a.pop_back();
		}
		stringstream ss;
		ss << ost;
		string str = ss.str();
		LongArithmetic ostatok;
		ostatok.StrToVector(str);
		return ostatok;
	}

	LongArithmetic translation(int number_system_of, int number_system_in, string file_name) {

		LongArithmetic temp(a.size()); // для перевода в 10
		LongArithmetic temp1(a.size());
		for (int i = 0; i < a.size(); i++) {
			if (a.at(i) >= number_system_of) { cout << "Несоответсвие числа и выбранной систем счисления" << endl; }
			//cout << "a.at(i) = " << a.at(i) << endl;

			stringstream ss;
			ss << a.at(i) * pow(number_system_of, i);
			string str = ss.str();
			//cout << "str = " << str<< endl;
			temp1.StrToVector(str);
		/*	cout << "temp1 = ";
			temp1.OutputA();
			cout << endl;
			cout << "1) temp = ";
			temp.OutputA();
			cout << endl;
			cout << "temp1 = ";
			temp1.OutputA();
			cout << endl;*/
			temp = temp + temp1;
			/*cout << "temp1 = ";
			temp1.OutputA();
			cout << endl;
			cout << "2) temp = ";
			temp.OutputA();
			cout << endl;*/
		}

		LongArithmetic rez;
		LongArithmetic v(1);
		cout << "temp = ";
		temp.OutputA();
		cout << endl;
		LongArithmetic temp2(10);


		while (temp > v) {
		/*	cout << "------------------" << endl;
			cout << "temp = ";
			temp.OutputA();
			cout << endl;*/
			temp2.a.clear();

			temp2 = temp % number_system_in;
			/*cout << "temp % number_system_in = ";
			temp2.OutputA();*/
			int index = temp2.VectorToInt();
			//cout <<"index = "<< index << " rez =  ";
			rez.a.push_back(index);
			rez.to_16.push_back(index);
			index = 0;
			/*rez.OutputA();
			cout << endl;*/
			temp = temp / number_system_in;
			/*cout << "temp = ";
			temp.OutputA();
			cout << endl;*/

		}

		rez.To16();
		/*cout << "To16 = ";
		rez.OutputTo_16();
		cout << endl;*/

		return rez;

	}
};

#define _CRT_SECURE_NO_WARNINGS
#endif




